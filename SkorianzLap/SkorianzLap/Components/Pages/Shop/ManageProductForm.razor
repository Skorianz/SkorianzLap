@using SkorianzLap.Components.Layout
@using SkorianzLap.Data
@using SkorianzLap.Data.Models.Shop
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore

@rendermode InteractiveServer

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

@if (Spinner == true)
{
    <Spinner />
}
else if (Product != null)
{
    var pageTitle = Product.Id != null ? "Produkt bearbeiten" : "Produkt erstellen";
    <h3>@(pageTitle)</h3>
    <hr />

    <EditForm Model="Product" FormName="edit-product" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-group form-floating">
            <InputText @bind-Value="Product.Name" class="form-control" autocomplete="off" aria-required="true" placeholder="Wählen Sie einen Produktnamen" />
            <label for="name" class="form-label">Name <span class="text-danger">*</span></label>
            <ValidationMessage For="() => Product.Name" class="text-danger" />
        </div>

        <div class="form-group form-floating">
            <InputTextArea @bind-Value="Product.Description" class="form-control" autocomplete="off" aria-required="true" placeholder="Geben Sie eine umfassende Produktbeschreibung für die Detailansicht an." style="min-height: 100px;" />
            <label for="description" class="form-label">Produktbeschreibung <span class="text-danger">*</span></label>
            <ValidationMessage For="() => Product.Description" class="text-danger" />
        </div>

        <div class="form-group form-floating">
            <InputText @bind-Value="Product.ShortDescription" class="form-control" autocomplete="off" aria-required="true" placeholder="Geben Sie eine Kurzbeschreibung für den Shop an." />
            <label for="short-description" class="form-label">Kurzbeschreibung <span class="text-danger">*</span></label>
            <ValidationMessage For="() => Product.ShortDescription" class="text-danger" />
        </div>

        <div class="form-group form-floating">
            <InputNumber @bind-Value="Product.Price" step="0.01" min="0.00" max="100000.00" class="form-control" autocomplete="off" aria-required="true" placeholder="Geben Sie den Preis in Euro an" />
            <label for="price" class="form-label">Preis in Euro <span class="text-danger">*</span></label>
            <ValidationMessage For="() => Product.Price" class="text-danger" />
        </div>

        <div class="form-group form-floating">
            <InputNumber @bind-Value="Product.Stock" step="1" min="-1" class="form-control" autocomplete="off" aria-required="true" placeholder="Geben Sie den Warenbestand an" />
            <label for="price" class="form-label">Restwarenbestand (-1 unendlich)<span class="text-danger">*</span></label>
            <ValidationMessage For="() => Product.Stock" class="text-danger" />
        </div>

        <div class="checkbox mb-3">
            <label class="form-label">
                <InputCheckbox @bind-Value="Product.IsEquipment" class="darker-border-checkbox form-check-input" />
                Ist dieses Produkt nur eine Zusatzoption für ein weiteres Produkt?
            </label>
        </div>

        @if (Product.IsEquipment == false && EquipmentProducts.Count > 0)
        {
            <div class="form-group">
                <label for="price" class="form-label">Zusatzoptionen hinzufügen</label>
                <div>
                    @foreach(var equipment in EquipmentProducts)
                    {
                        
                    }
                </div>
            </div>
        }

        <div class="checkbox mb-3">
            <label class="form-label">
                <InputCheckbox @bind-Value="Product.IsActive" class="darker-border-checkbox form-check-input" />
                Dieses Produkt im Shop listen
            </label>
        </div>

        <div class="form-group d-flex gap-2">
            @if (Product.Id != null)
            {
                <button type="submit" class="btn btn-primary">Produkt speichern</button>
            }
            else
            {
                <button type="submit" class="btn btn-success">Produkt erstellen</button>
            }

            <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">Abbrechen</button>
        </div>

        <div class="form-group d-flex gap-2">
            @if (Product.Id != null)
            {
                <button type="button" class="btn btn-danger" @onclick="Delete">Produkt löschen</button>
            }
        </div>
    </EditForm>
}
else
{
    <h6>Produkt nicht gefunden</h6>
}

@code {
    private string ProductListPage = "/products/manage";
    public Product? Product { get; set; }
    public List<Product> EquipmentProducts { get; set; } = new();
    public List<ProductEquipment> ProductEquipments { get; set; } = new();

    private bool Spinner = true;

    public async Task NewProduct()
    {
        Product = new();

        await LoadOtherTables();

        Spinner = false;
        StateHasChanged();
    }

    public async Task LoadProduct(long id)
    {
        Spinner = true;
        StateHasChanged();

        Product = await DbContext.Products.FindAsync(id);

        await LoadOtherTables();

        Spinner = false;
        StateHasChanged();
    }

    public async Task LoadOtherTables()
    {
        EquipmentProducts = await DbContext.Products.Where(x => x.IsEquipment == true && x.IsActive == true && x.IsDeleted == false).ToListAsync();
        //ProductEquipments = await DbContext.ProductEquipments
    }

    private async Task OnValidSubmitAsync()
    {
        if (Product != null)
        {
            if (Product.Id != null)
            {
                await Save();
            }
            else
            {
                await Create();
            }
        }

    }

    public async Task Create()
    {
        if(Product != null && Product.Id == null)
        {
            Spinner = true;
            StateHasChanged();

            await DbContext.Products.AddAsync(Product);
            await DbContext.SaveChangesAsync();

            NavigationManager.NavigateTo(ProductListPage, true);
        }
    }

    public async Task Save()
    {
        if(Product != null && Product.Id != null)
        {
            Spinner = true;
            StateHasChanged();

            DbContext.Update(Product);
            await DbContext.SaveChangesAsync();

            NavigationManager.NavigateTo(ProductListPage, true);
        }
    }

    public async Task Cancel()
    {
        Spinner = true;
        StateHasChanged();

        NavigationManager.NavigateTo(ProductListPage, true);
    }

    public async Task Delete()
    {
        if (Product != null && Product.Id != null)
        {
            Spinner = true;
            StateHasChanged();

            Product.IsDeleted = true;
            Product.IsActive = false;

            DbContext.Update(Product);
            await DbContext.SaveChangesAsync();

            NavigationManager.NavigateTo(ProductListPage, true);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Name")]
        public string Name { get; set; } = "";

        [Required]
        [Display(Name = "Produktbeschreibung")]
        public string Description { get; set; } = "";

        [Required]
        [Display(Name = "Kurzbeschreibung")]
        public string ShortDescription { get; set; } = "";

        [Required]
        [Display(Name = "Preis")]
        public decimal Price { get; set; } = 0;

        [Required]
        [Display(Name = "Warenbestand")]
        public decimal Stock { get; set; } = 0;
    }
}
